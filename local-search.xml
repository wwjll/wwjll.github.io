<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/08/07/cg-math/rotation/"/>
    <url>/2023/08/07/cg-math/rotation/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="罗德里格斯公式">罗德里格斯公式</h3><!-- ![Rodrigues](https://github.com/wwjll/PublicBlogs/tree/release/source/images/Orthogonal_decomposition_unit_vector_rodrigues_rotation_formula.svg) --><figure><img src="/images/Orthogonal_decomposition_unit_vector_rodrigues_rotation_formula.svg" alt="Rodrigues"><figcaption aria-hidden="true">Rodrigues</figcaption></figure><p><span class="math display">\[E = mc^2\sum \frac{\partial _{}^{}}{\partial x}\]</span></p><h3 id="旋转矩阵">旋转矩阵</h3><h3 id="四元数">四元数</h3>]]></content>
    
    
    <categories>
      
      <category>cg-math</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>时间复杂度和空间复杂度</title>
    <link href="/2023/08/07/algorithm/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E7%A9%BA%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <url>/2023/08/07/algorithm/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E7%A9%BA%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>from： https://zhuanlan.zhihu.com/p/50479555</p><h2 id="时间复杂度">时间复杂度</h2><ul><li>基本思路</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 通过分析每一行的复杂度相加<br><span class="hljs-regexp">//</span> T(n) = O(f(n)) = O(<span class="hljs-number">2</span>n + <span class="hljs-number">1</span>) ≈ O(n)<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i)     <span class="hljs-regexp">//</span> f(n) = <span class="hljs-number">1</span><br>&#123;<br>   j = i;               <span class="hljs-regexp">//</span> f(n) = n<br>   j++;                 <span class="hljs-regexp">//</span> f(n) = n<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>常见复杂度算法</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> O(<span class="hljs-number">1</span>) 没有循环等结构， 复杂度不随某个变量而变化<br>int i = <span class="hljs-number">1</span>;<br>int j = <span class="hljs-number">2</span>;<br>++i;<br>j++;<br>int m = i + j;<br><br><br><span class="hljs-regexp">//</span> O(n) 如上一条所描述<br><br><span class="hljs-regexp">//</span> O(n^<span class="hljs-number">2</span>) 双重循环<br><span class="hljs-keyword">for</span>(x=<span class="hljs-number">1</span>; i&lt;=n; x++)<br>&#123;<br>   <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>       j = i;<br>       j++;<br>    &#125;<br>&#125;<br><br><span class="hljs-regexp">//</span> O(logN), 这个循环需要执行的次数 x = log2^N ≈ O(logN)<br>int i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;N)<br>&#123;<br>    i = i * <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-regexp">//</span> O(nlogN), 复杂度为 logN 的算法循环循环 n 次<br><span class="hljs-keyword">for</span>(m=<span class="hljs-number">1</span>; m&lt;N; m++)<br>&#123;<br>    i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;n)<br>    &#123;<br>        i = i * <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-regexp">//</span> 依此类推<br><br></code></pre></td></tr></table></figure><h2 id="空间复杂度">空间复杂度</h2><ul><li>基本思想，推算 算法所需的临时空间和变量大小变化的关系</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs excel">// 第一行new了一个数组出来，这个数据占用的大小为<span class="hljs-built_in">n</span>，<br>// 这段代码的<span class="hljs-number">2</span>-<span class="hljs-number">6</span>行，虽然有循环，但没有再分配新的空间<br>// S(<span class="hljs-built_in">n</span>) = O(<span class="hljs-built_in">n</span>) <br><span class="hljs-built_in">int</span>[] m = new <span class="hljs-built_in">int</span>[<span class="hljs-built_in">n</span>]<br>for(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-built_in">n</span>; ++i)<br>&#123;<br>   j = i;<br>   j++;<br>&#125;<br><br><br>// O(<span class="hljs-number">1</span>) 算法执行所需要的临时空间不随着某个变量<span class="hljs-built_in">n</span>的大小而变化<br><span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> j = <span class="hljs-number">2</span>;<br>++i;<br>j++;<br><span class="hljs-built_in">int</span> m = i + j;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>v2ray 科学上网</title>
    <link href="/2023/08/07/miscellous/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2Ray/"/>
    <url>/2023/08/07/miscellous/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/V2Ray/</url>
    
    <content type="html"><![CDATA[<h3 id="项目-git-地址">项目 git 地址：</h3><ul><li>服务器 docker ：<a href="https://github.com/wulabing/wulabing_v2ray_docker.git">https://github.com/wulabing/wulabing_v2ray_docker.git</a></li><li>windows 客户端：<a href="https://github.com/2dust/v2rayN/releases">https://github.com/2dust/v2rayN/releases</a></li><li>mac 客户端：<a href="https://github.com/yanue/V2rayU/releases/tag/3.3.0">https://github.com/yanue/V2rayU/releases/tag/3.3.0</a></li></ul><h3 id="服务器安装-v2ray-脚本">服务器安装 v2ray 脚本：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -N --no-check-certificate -q -O install.sh <span class="hljs-string">&quot;&lt;https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install.sh&gt;&quot;</span> &amp;&amp; <span class="hljs-built_in">chmod</span> +x install.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure><h3 id="云主机">云主机</h3><ul><li>Hostyun , 优惠码（hostyun）: <a href="https://my.hostyun.com/page.aspx?c=login&amp;r=%2fidcsystem.aspx"></a><a href="https://my.hostyun.com">https://my.hostyun.com</a></li></ul><h3 id="域名商">域名商</h3><ul><li>dynadot : <a href="https://www.dynadot.com/account/domain/name/list.html"></a><a href="https://www.dynadot.com/account/domain/name/list.html">https://www.dynadot.com/account/domain/name/list.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>miscellous</category>
      
      <category>科学上网</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
